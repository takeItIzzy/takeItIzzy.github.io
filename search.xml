<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTML 语义化]]></title>
    <url>%2F2019%2F07%2F29%2Fhtml%E8%AF%AD%E4%B9%89%E5%8C%96%2F</url>
    <content type="text"><![CDATA[其实 HTML 在刚开始设计出来的时候就是带有一定的“语义”的，包括段落、表格、图片、标题等等，但这些更多的只是方便浏览器等 UA 对它们做合适的处理。但逐渐地，机器也要借助 HTML 提供的语义以及自然语言处理的手段来“读懂”它们从网上获取的 HTML 文档，但它们无法读懂例如“红色的文字”或者是深度嵌套的表格布局中内容的含义，因为太多已有的内容都是专门为了可视化的浏览器设计的。面对这种情况，出现了两种观点： 让机器的理解能力越来越接近人类，人能看懂、听懂的东西，机器也能理解； 我们应该在发布内容的时候，就用机器可读的、被广泛认可的语义信息来描述内容，来降低机器处理 Web 内容的难度。 Web 语义化，其实就是在往第二条路的方向上迈出的一小步，即对已有的被广泛认可的 HTML 标准做改进。 什么是语义类标签？语义类标签看起来表现都差不多，主要的区别在于它们表示了不同的语义，比如 section、nav、code，都是语义类标签。 语义是我们说话表达的意思。多数的语义实际上都是由文字来承载的。语义类标签则是纯文字的补充。比如标题、自然段、章节、列表，这些内容纯文字无法表达，所以需要语义标签代为表达。 语义化的好处语义化，简单来说就是让机器可以理解内容。正确地使用语义标签可以带来很多好处： 语义类标签增强了代码可读性，开发者可以更清晰地看出网页结构，便于团队开发和维护。 除了对人类友好之外，语义类标签也十分适宜机器阅读。它们的文字表现力丰富，更适合搜索引擎检索（SEO），也可以让搜索引擎爬虫更好地获取到更多有效信息，提升网页搜索量，并且语义类还可以支持读屏软件，根据文章自动生成目录等等。 但是，错误地使用语义标签，会给机器阅读造成混淆、增加嵌套，给 CSS 编写加重负担。 所以，对于语义标签，应该是“用对”比“不用”好，“不用”比“用错”好。 什么时候应该用语义化标签呢？作为自然语言延伸的语义类标签这个场景的目的是用来表达一定的结构或者消除歧义。 先来看看“表达一定的结构”这个场景。 在日语中，有一个语法现象叫做 ルビ ，它的读音是“ ruby ”，中文的意思大约类似于注音或者意思的注解，它的形式可以看下图： ruby 这个形式，被中国的网友玩出了新花样，比如表情包。 在 HTML5 中，就引入了这个表示 ruby 的标签，它由 ruby、rt、rp 三个标签来实现。 所以说，这些情况里存在的语义，其实原本就存在了，只是我们用纯文字无法表达，HTML 作为一种“超文本”语言，支持这些文字表达就是必要的了。 还有一种情况是，HTML 的有些标签实际上就是必要的，甚至必要的程度可以达到：如果没有这个标签，文字会产生歧义的程度。 今天我吃了一个苹果。 这句话的含义看上去很清楚，但是实际上，这句话放到不同上下文中，可能表达的意思完全不同。 12昨天我吃了一个香蕉。今天我吃了一个苹果。 再比如： 12昨天我吃了两个苹果。今天我吃了一个苹果。 这两段的读音和意思都发生了变化。那么当没有上下文时，如何消除歧义呢？这就要用到 em 标签了，em 表示重音： 12今天我吃了一个&lt;em&gt;苹果&lt;/em&gt;。今天我吃了&lt;em&gt;一个&lt;/em&gt;苹果。 通过 em 标签，可以消除这样的歧义。 作为标题摘要的语义类标签中国古代小说就形成了“章-回”的概念，西方的戏剧也有幕的区分，人类的自然语言作品也是如出一辙。 HTML 也应该支持这样的需求。HTML 语义标签中，有不少是用于支持这样结构的标签。 语义化的 HTML 能够支持自动生成目录结构，HTML 标准中还专门规定了生成目录结构的算法，即使我们并不打算深入实践语义，也应该尽量在大的层面上保证这些元素的语义化使用。 首先我们需要形成一个概念，一篇文档会有一个树形的目录结构，它由各个级别的标题组成。这个树形结构可能不会跟 HTML 元素的嵌套关系一致。 123456789例如：&lt;h1&gt;HTML 语义 &lt;/h1&gt;&lt;p&gt;balah balah balah balah&lt;/p&gt;&lt;h2&gt; 弱语义 &lt;/h2&gt;&lt;p&gt;balah balah&lt;/p&gt;&lt;h2&gt;结构性元素&lt;/h2&gt;&lt;p&gt;balah balah&lt;/p&gt;... 这段 HTML 几乎是平铺的元素，但是它的标题结构是： HTML 语义 弱语义 结构性元素 … h1 - h6 是最基本的标题，它们表示了文章中不同层级的标题。有时候，我们会有副标题，为了避免副标题产生额外的一个层级，可以使用 hgroup 标签。 我们来看下有无 hgroup 的对比： 1234&lt;h1&gt;JavaScript 对象&lt;/h1&gt;&lt;h2&gt;我们需要模拟类吗？&lt;/h2&gt;&lt;p&gt;balah balah&lt;/p&gt;... 此段生成以下标题结构： JavaScript 对象 我们需要模拟类吗？ … 12345&lt;hgroup&gt; &lt;h1&gt;JavaScript 对象&lt;/h1&gt; &lt;h2&gt;我们需要模拟类吗？&lt;/h2&gt;&lt;/hgroup&gt;&lt;p&gt;balah balah&lt;/p&gt; 这一段生成以下标题结构： JavaScript 对象——我们需要模拟类吗？ … 我们通过两个效果的对比就可以知道，在 hgroup 中的 h1 - h6 被视为同一标题的不同组成部分。 从 HTML5 开始，我们有了 section 标签，这个标签不仅仅是“有语义的 div”，它会改变 h1 - h6 的语义。section 的嵌套会使得其中的 h1 - h6 下降一级。因此，在 HTML5 以后，我们只需要 section 和 h1 就足以形成文档的树形结构： 12345678910111213&lt;section&gt; &lt;h1&gt;HTML 语义 &lt;/h1&gt; &lt;p&gt;balah balah balah balah&lt;/p&gt; &lt;section&gt; &lt;h1&gt; 弱语义 &lt;/h1&gt; &lt;p&gt;balah balah&lt;/p&gt; &lt;/section&gt; &lt;section&gt; &lt;h1&gt; 结构性元素 &lt;/h1&gt; &lt;p&gt;balah balah&lt;/p&gt; &lt;/section&gt;......&lt;/section&gt; 这段代码同样会形成前面例子的标题结构： HTML 语义 弱语义 结构性元素 … 作为整体结构的语义类标签这是最常见的一个语义类标签的使用场景。随着越来越多的浏览器推出“阅读模式”，以及各种非浏览器终端的出现，语义化的 HTML 适合机器阅读的特性变得越来越重要。 应用了语义化结构的页面，可以明确地提示出页面信息的主次关系，它能让浏览器很好地支持“阅读视图”功能，还可以让搜索引擎的命中率提升，同时，它也对视障用户的读屏软件更友好。 我们正确使用整体结构类的语义标签，可以让页面对机器更友好。比如，一个典型的 body 类似这样： 123456789101112131415161718&lt;body&gt; &lt;header&gt; &lt;nav&gt; …… &lt;/nav&gt; &lt;/header&gt; &lt;aside&gt; &lt;nav&gt; …… &lt;/nav&gt; &lt;/aside&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;footer&gt; &lt;address&gt;……&lt;/address&gt; &lt;/footer&gt;&lt;/body&gt; 除此之外，还有 article，article 是一种特别的结构，它表示具有一定独立性质的文章。所以，article 和 body 具有相似的结构，同时，一个 HTML 页面中，可能有多个 article 存在。 一个典型的场景是多篇新闻展示在同一个新闻专题页面中，这种类似报纸的多文章结构适合用 article 来组织。 12345678910111213141516171819&lt;body&gt; &lt;header&gt;……&lt;/header&gt; &lt;article&gt; &lt;header&gt;……&lt;/header&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;footer&gt;……&lt;/footer&gt; &lt;/article&gt; &lt;article&gt; …… &lt;/article&gt; &lt;article&gt; …… &lt;/article&gt; &lt;footer&gt; &lt;address&gt;&lt;/address&gt; &lt;/footer&gt;&lt;/body&gt; body 里面有自己的 header 和 footer ，然后里面是竖篇的 article，每一个 article 里面都有自己的 header、section、footer。这是一个典型的多文章结构。 在这个结构里，我们看到了一些新标签。 header 通常出现在前部，表示导航或者介绍性的内容。 footer 通常出现在尾部，包含一些作者信息、相关链接、版权信息等。 header 和 footer 一般都是放在 article 或者 body 的直接子元素，但是标准中并没有明确规定，footer 也可以和 aside，nav，section 相关联（header 不存在关联问题）。 aside 表示跟文章主体不那么相关的部分，它可能包含导航、广告等工具性质的内容。 aside 很容易被理解为侧边栏，实际上二者是包含关系，侧边栏是 aside，aside 不一定是侧边栏。 aside 和 header（nav 标签），二者的区别是，header 中的导航多数是到文章自己的目录，而 aside 中的导航多数是到关联页面或者是整站地图。 最后 footer 中包含 address，这是个非常容易被误用的标签。address 并非像 date 一样，表示一个给机器阅读的地址，而是表示”文章（作者）的联系方式“，address 明确地只关联到 article 和 body。 用语义类标签来构建页面模拟 wiki 的页面，待办。]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>语义化</tag>
        <tag>前端学习之路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从今天起记录我的前端学习之路]]></title>
    <url>%2F2019%2F07%2F26%2F%E4%BB%8E%E4%BB%8A%E5%A4%A9%E8%B5%B7%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[从今天起，我要开始记录我自己的前端学习之路了。 其实我不完全是前端的小白，断断续续知识也学了不少了，只是前端知识面覆盖太广，而我学习时间拖的太长，好多都已经遗忘了，所以一直都想找个机会从头把所有知识点都巩固一下。 前两天翻知乎，看到一个问题——有哪些适合前端程序员浏览的网站，有答案推荐了百度前端学院，我就想正好利用这个平台好好巩固一下我的基础知识。今天花了一上午搭建了这个个人网站，希望可以将我的学习之路好好地记录下来。 我喜欢前端，一是因为可以做出精致的，直接展示给用户的交互界面，二是因为我很喜欢JavaScript这门语言。不是说js本身性能多么好，语法多么完美，而是js一开始被人们认为是玩具语言，不出多少年必死的言论层出不穷，然而js却越挫越勇，在很多大神手中玩出了花，甚至现在可以只靠js就能从前端到后台，从桌面程序到跨平台应用，都在一个人手中实现，太厉害了。而那句著名的，“一切能用JavaScript实现的程序，最终都会被用JavaScript实现”，也深深打动了我。 希望自己可以将这个网站坚持做下去，也许几年后的自己真的会感激我现在的努力，加油！]]></content>
      <categories>
        <category>杂感</category>
      </categories>
  </entry>
</search>
