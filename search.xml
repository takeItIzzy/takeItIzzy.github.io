<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[strrchr]]></title>
    <url>%2F2019%2F08%2F27%2Fstrrchr%2F</url>
    <content type="text"><![CDATA[今天在学 PHP 字符串操作的时候写了这么一行代码 1echo strrchr("🍔🍟🍟🍔🥤", "🍟"); 我希望的是能输出 🍟🍔🥤，但其实输出了 🥤。 这是怎么回事呢？我本来以为 strrchr() 的作用是查找指定子字符串在字符串中最后一次出现的位置，然后将字符串这个位置之后的所有字符返回（包含这个子字符串），然而上网上查了下资料，发现并不是这样。 Find the last occurrence of a character in a string.If needle contains more than one character, only the first is used. 这是对于 strrchr() 函数的描述，重点在第二句。也就是说，strrchr() 函数的第二个参数是个字符而不是字符串。如果 strrchr() 函数的第二个参数传的是个字符串的话，将按照这个字符串的第一个字符查找。 举个例子： 1echo strrchr("I like this movie, how about you?", "this"); 这行代码的本意是想输出 this movie, how about you?，但其实会输出 t you?，因为系统会只根据 this 字符串的第一个字符 t 进行查找，找到这句话中最后一个 t，并返回之后的字符串。 了解了 strrchr() 函数后，我们再来回到最开始的问题，为什么我在 🍔🍟🍟🍔🥤 中搜索 🍟，返回的是 🥤 呢？这就要说到 PHP 对于字符串的处理方式了。 PHP 的字符串，是由字节组成的数组构成的，类似于 C 语言 char a[3] = &quot;abc&quot; 这样，一个字符占一个字节。 除此之外，PHP 并没有存储文本的编码信息，也就是说，PHP 并不知道这些字符串的二进制数据，应该对应怎样的编码。 PHP 并不保存字符串的编码信息。所以即便 🍟 保存为 f09f8d9f，在字符串原生函数看来，都只是一串二进制数，所以，PHP 原生字符串函数只能操作单字节字符，也就是把一个字节当作一个字符来处理。 知道了这些，就能看懂上面的例子了。我们可以通过 bin2hex() 函数将字符串转为 16 进制数，🍔🍟🍟🍔🥤 被转为了 f09f8d94f09f8d9ff09f8d9ff09f8d94f09fa5a4。我们将 🍟 也用 bin2hex() 转换，得到结果为 f09f8d9f。将这个结果转为二进制数，即 11110000100111111000110110011111。我们现在知道，即使将 strrchr() 函数的第二个参数填为 🍟，其实 PHP 也并不会搜索 🍟，而会搜索 🍟 中第一个字节的字符，即 11110000 所代表的 f0，然后返回 f0 之后直到结束的所有字符，也就是 f09fa5a4，也就是 🥤。 这就是为什么在 🍔🍟🍟🍔🥤 中搜索 🍟，返回的却是 🥤 的原因了。 参考资料： http://webkit.cc/post/php-and-unicode.html https://juejin.im/post/5c00b31a5188251d9e0c4a59]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>易错点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[易错点总结]]></title>
    <url>%2F2019%2F07%2F30%2F%E6%98%93%E9%94%99%E7%82%B9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[section 标签使用的几点禁忌： section 不仅仅是一个普通的容器标签。当一个标签只是为了样式化或者方便脚本使用时，应该使用 div 。一般来说，当元素内容明确地出现在文档大纲中时，section 就是适用的。 如果其他的元素，比如 article、aside、nav 等更合适，就不要用 section。 不要为没有标题的内容区块使用 section。]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>易错点</tag>
        <tag>HTML</tag>
        <tag>前端学习之路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 语义化]]></title>
    <url>%2F2019%2F07%2F29%2Fhtml%E8%AF%AD%E4%B9%89%E5%8C%96%2F</url>
    <content type="text"><![CDATA[其实 HTML 在刚开始设计出来的时候就是带有一定的“语义”的，包括段落、表格、图片、标题等等，但这些更多的只是方便浏览器等 UA 对它们做合适的处理。但逐渐地，机器也要借助 HTML 提供的语义以及自然语言处理的手段来“读懂”它们从网上获取的 HTML 文档，但它们无法读懂例如“红色的文字”或者是深度嵌套的表格布局中内容的含义，因为太多已有的内容都是专门为了可视化的浏览器设计的。面对这种情况，出现了两种观点： 让机器的理解能力越来越接近人类，人能看懂、听懂的东西，机器也能理解； 我们应该在发布内容的时候，就用机器可读的、被广泛认可的语义信息来描述内容，来降低机器处理 Web 内容的难度。 Web 语义化，其实就是在往第二条路的方向上迈出的一小步，即对已有的被广泛认可的 HTML 标准做改进。 什么是语义类标签？语义类标签看起来表现都差不多，主要的区别在于它们表示了不同的语义，比如 section、nav、code，都是语义类标签。 语义是我们说话表达的意思。多数的语义实际上都是由文字来承载的。语义类标签则是纯文字的补充。比如标题、自然段、章节、列表，这些内容纯文字无法表达，所以需要语义标签代为表达。 语义标签并不一定会在视觉效果上有特殊之处，很多时候只是为了给被包裹的内容一个定义，加一种语义。 语义化的好处语义化，简单来说就是让机器可以理解内容。正确地使用语义标签可以带来很多好处： 语义类标签增强了代码可读性，开发者可以更清晰地看出网页结构，便于团队开发和维护。 除了对人类友好之外，语义类标签也十分适宜机器阅读。它们的文字表现力丰富，更适合搜索引擎检索（SEO），也可以让搜索引擎爬虫更好地获取到更多有效信息，提升网页搜索量，并且语义类还可以支持读屏软件，根据文章自动生成目录等等。 但是，错误地使用语义标签，会给机器阅读造成混淆、增加嵌套，给 CSS 编写加重负担。 所以，对于语义标签，应该是“用对”比“不用”好，“不用”比“用错”好。 什么时候应该用语义化标签呢？作为自然语言延伸的语义类标签这个场景的目的是用来表达一定的结构或者消除歧义。 先来看看“表达一定的结构”这个场景。 在日语中，有一个语法现象叫做 ルビ ，它的读音是“ ruby ”，中文的意思大约类似于注音或者意思的注解，它的形式可以看下图： ruby 这个形式，被中国的网友玩出了新花样，比如表情包。 在 HTML5 中，就引入了这个表示 ruby 的标签，它由 ruby、rt、rp 三个标签来实现。 所以说，这些情况里存在的语义，其实原本就存在了，只是我们用纯文字无法表达，HTML 作为一种“超文本”语言，支持这些文字表达就是必要的了。 还有一种情况是，HTML 的有些标签实际上就是必要的，甚至必要的程度可以达到：如果没有这个标签，文字会产生歧义的程度。 今天我吃了一个苹果。 这句话的含义看上去很清楚，但是实际上，这句话放到不同上下文中，可能表达的意思完全不同。 12昨天我吃了一个香蕉。今天我吃了一个苹果。 再比如： 12昨天我吃了两个苹果。今天我吃了一个苹果。 这两段的读音和意思都发生了变化。那么当没有上下文时，如何消除歧义呢？这就要用到 em 标签了，em 表示重音： 12今天我吃了一个&lt;em&gt;苹果&lt;/em&gt;。今天我吃了&lt;em&gt;一个&lt;/em&gt;苹果。 通过 em 标签，可以消除这样的歧义。 拓展：&emsp;&emsp;HTML 着重元素（&lt;em&gt;）标记出需要用户着重阅读的内容，通常该元素会被浏览器展示为斜体文本，&lt;em&gt; 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认为越需要着重阅读。&emsp;&emsp;然而，当你只想让文本展示斜体样式的时候，不应该使用 em 标签，而是用 CSS 样式来实现。使用 &lt;cite&gt; 标签来标记书本、歌曲、剧本等的标题；那也会将文本展示成斜体，但是它们有着不同的寓意。使用 &lt;strong&gt; 标签来标记比周围文本更重要的文本。 作为标题摘要的语义类标签中国古代小说就形成了“章-回”的概念，西方的戏剧也有幕的区分，人类的自然语言作品也是如出一辙。 HTML 也应该支持这样的需求。HTML 语义标签中，有不少是用于支持这样结构的标签。 语义化的 HTML 能够支持自动生成目录结构，HTML 标准中还专门规定了生成目录结构的算法，即使我们并不打算深入实践语义，也应该尽量在大的层面上保证这些元素的语义化使用。 首先我们需要形成一个概念，一篇文档会有一个树形的目录结构，它由各个级别的标题组成。这个树形结构可能不会跟 HTML 元素的嵌套关系一致。 123456789例如：&lt;h1&gt;HTML 语义 &lt;/h1&gt;&lt;p&gt;balah balah balah balah&lt;/p&gt;&lt;h2&gt; 弱语义 &lt;/h2&gt;&lt;p&gt;balah balah&lt;/p&gt;&lt;h2&gt;结构性元素&lt;/h2&gt;&lt;p&gt;balah balah&lt;/p&gt;... 这段 HTML 几乎是平铺的元素，但是它的标题结构是： HTML 语义 弱语义 结构性元素 … h1 - h6 是最基本的标题，它们表示了文章中不同层级的标题。有时候，我们会有副标题，为了避免副标题产生额外的一个层级，可以使用 hgroup 标签。 我们来看下有无 hgroup 的对比： 1234&lt;h1&gt;JavaScript 对象&lt;/h1&gt;&lt;h2&gt;我们需要模拟类吗？&lt;/h2&gt;&lt;p&gt;balah balah&lt;/p&gt;... 此段生成以下标题结构： JavaScript 对象 我们需要模拟类吗？ … 12345&lt;hgroup&gt; &lt;h1&gt;JavaScript 对象&lt;/h1&gt; &lt;h2&gt;我们需要模拟类吗？&lt;/h2&gt;&lt;/hgroup&gt;&lt;p&gt;balah balah&lt;/p&gt; 这一段生成以下标题结构： JavaScript 对象——我们需要模拟类吗？ … 我们通过两个效果的对比就可以知道，在 hgroup 中的 h1 - h6 被视为同一标题的不同组成部分。 从 HTML5 开始，我们有了 section 标签，这个标签不仅仅是“有语义的 div”，它会改变 h1 - h6 的语义。section 的嵌套会使得其中的 h1 - h6 下降一级。因此，在 HTML5 以后，我们只需要 section 和 h1 就足以形成文档的树形结构： 12345678910111213&lt;section&gt; &lt;h1&gt;HTML 语义 &lt;/h1&gt; &lt;p&gt;balah balah balah balah&lt;/p&gt; &lt;section&gt; &lt;h1&gt; 弱语义 &lt;/h1&gt; &lt;p&gt;balah balah&lt;/p&gt; &lt;/section&gt; &lt;section&gt; &lt;h1&gt; 结构性元素 &lt;/h1&gt; &lt;p&gt;balah balah&lt;/p&gt; &lt;/section&gt;......&lt;/section&gt; 这段代码同样会形成前面例子的标题结构： HTML 语义 弱语义 结构性元素 … 作为整体结构的语义类标签这是最常见的一个语义类标签的使用场景。随着越来越多的浏览器推出“阅读模式”，以及各种非浏览器终端的出现，语义化的 HTML 适合机器阅读的特性变得越来越重要。 应用了语义化结构的页面，可以明确地提示出页面信息的主次关系，它能让浏览器很好地支持“阅读视图”功能，还可以让搜索引擎的命中率提升，同时，它也对视障用户的读屏软件更友好。 我们正确使用整体结构类的语义标签，可以让页面对机器更友好。比如，一个典型的 body 类似这样： 123456789101112131415161718&lt;body&gt; &lt;header&gt; &lt;nav&gt; …… &lt;/nav&gt; &lt;/header&gt; &lt;aside&gt; &lt;nav&gt; …… &lt;/nav&gt; &lt;/aside&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;footer&gt; &lt;address&gt;……&lt;/address&gt; &lt;/footer&gt;&lt;/body&gt; 除此之外，还有 article，article 是一种特别的结构，它表示具有一定独立性质的文章。所以，article 和 body 具有相似的结构，同时，一个 HTML 页面中，可能有多个 article 存在。 一个典型的场景是多篇新闻展示在同一个新闻专题页面中，这种类似报纸的多文章结构适合用 article 来组织。 12345678910111213141516171819&lt;body&gt; &lt;header&gt;……&lt;/header&gt; &lt;article&gt; &lt;header&gt;……&lt;/header&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;section&gt;……&lt;/section&gt; &lt;footer&gt;……&lt;/footer&gt; &lt;/article&gt; &lt;article&gt; …… &lt;/article&gt; &lt;article&gt; …… &lt;/article&gt; &lt;footer&gt; &lt;address&gt;&lt;/address&gt; &lt;/footer&gt;&lt;/body&gt; body 里面有自己的 header 和 footer ，然后里面是竖篇的 article，每一个 article 里面都有自己的 header、section、footer。这是一个典型的多文章结构。 在这个结构里，我们看到了一些新标签。 header 通常出现在前部，表示导航或者介绍性的内容。 footer 通常出现在尾部，包含一些作者信息、相关链接、版权信息等。 header 和 footer 一般都是放在 article 或者 body 的直接子元素，但是标准中并没有明确规定，footer 也可以和 aside，nav，section 相关联（header 不存在关联问题）。 aside 表示跟文章主体不那么相关的部分，它可能包含导航、广告等工具性质的内容。 aside 很容易被理解为侧边栏，实际上二者是包含关系，侧边栏是 aside，aside 不一定是侧边栏。 aside 和 header（nav 标签），二者的区别是，header 中的导航多数是到文章自己的目录，而 aside 中的导航多数是到关联页面或者是整站地图。 最后 footer 中包含 address，这是个非常容易被误用的标签。address 并非像 date 一样，表示一个给机器阅读的地址，而是表示”文章（作者）的联系方式“，address 明确地只关联到 article 和 body。 用语义类标签来构建页面我们通过分析一篇 Wiki 的文章用到的语义类标签，来进一步学习语义类标签。 http://static001.geekbang.org/static/time/quote/World_Wide_Web-Wikipedia.html 虽然在原本的 Wikipedia 网站中，也是大量使用了 div 和 span 来完成功能。在这里，我们来尝试分析一下，应该如何用语义类标签来呈现这样的一个页面。 aside HTML &lt;aside&gt; 元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框（call-out boxes）。 首先我们来看下，左侧侧边栏，根据之前提到的语义定义，这里属于 aside 内容，是导航性质的工具内容。 article HTML &lt;article&gt; 元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。​​ 引申阅读：div, section, article 的区别 我们来到文章主体部分，因为主体部分具有明确的独立性，所以可以用 article 来包裹。 hgroup, h1, h2 HTML &lt;hgroup&gt; 元素 (HTML Headings Group Element) 代表一个段的标题。它规定了在文档轮廓里（the outline of the document ）的单一标题是它所属的隐式或显式部分的标题。 前文中介绍过 hgroup 和 h1 - h6 的作用，hgroup 是标题组，h1 是一级标题，h2 是二级标题。这里，World Wide Web 是文章的大标题，适合 h1 元素。 接下来出现了一个副标题。From Wikipedia, the free encyclopedia。这个地方适合使用 h2，跟 h1 组成一个 hgroup，所以代码可能是类似这样的： 1234&lt;hgroup&gt;&lt;h1&gt;World Wide Web &lt;/h1&gt;&lt;h2&gt;From Wikipedia, the free encyclopedia&lt;/h2&gt;&lt;/hgroup&gt; abbr HTML &lt;abbr&gt; 元素用于展示缩写，并且可以通过可选的 title 属性提供完整的描述。若使用 title 属性，则它必须且仅可包含完整的描述内容。 abbr 标签表示缩写。考虑到 WWW 是 World Wide Web 的缩写，所以文中所有出现的 WWW，都应该使用 abbr 标签。 &lt;abbr title=&quot;World Wide Web&quot;&gt;WWW&lt;/abbr&gt; hr HTML &lt;hr&gt; 元素表示段落级元素之间的主题转换（例如，一个故事中的场景的改变，或一个章节的主题的改变）。在 HTML 的早期版本中，它是一个水平线。现在它仍能在可视化浏览器中表现为水平线，但目前被定义为语义上的，而不是表现层面上。 在 Wiki 的界面中，出现了一条很长的横线，大家都知道 hr 标签表示横向分隔线，那么这个地方是不是应该用 hr 呢？ 答案是不用。hr 表示故事走向的转变或者话题的转变，显然此处两个标题并非这种关系，所以我们应该使用 CSS 的 border 来把它当作纯视觉效果来实现，在这里是不需要使用 hr 的。 p HTML &lt;p&gt; 元素（或者说 HTML 段落元素）表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，&lt;p&gt; 是块级元素。 接下来一段，有三段“note”，也就是注记。它在文章中用作额外注释。HTML 中并没有 note 相关的语义，所以我们用普通的 p 标签，加上 class=”note” 来实现。后面的多数自然段都是普通的段落，我们用 p 标签来实现。 strong Strong 元素 (&lt;strong&gt;)表示文本十分重要，一般用粗体显示。 这里“World Wide Web(www)”和“the Web”使用了黑体呈现，从上下文来看，这里表示这个词很重要，所以我们使用 strong 标签。 blockquote, q, cite &emsp;&emsp;HTML &lt;blockquote&gt; 元素（或者 HTML 块级引用元素），代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（可通过 margin 修改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 blockquote 元素的 cite 属性上，若要以文本的形式告知读者引文的出处时，可以使用 &lt;cite&gt; 元素。&emsp;&emsp;HTML 引用标签 (&lt;q&gt;)表示一个封闭的并且是短的行内引用的文本。这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 &lt;blockquote&gt; 替代。&emsp;&emsp;HTML 引用（Citation）标签 (&lt;cite&gt;) 表示一个作品的引用。它必须包含引用作品的符合简写格式的标题或者 URL ，它可能是一个根据添加引用元数据的约定的简写形式。可以把 cite 标签简单理解为书名号。 12345678&lt;blockquote cite="https://www.huxley.net/bnw/four.html"&gt; &lt;p&gt; Words can be like X-rays, if you use them properly—they’ll go through anything. You read and you’re pierced. &lt;/p&gt; &lt;footer&gt; —Aldous Huxley, &lt;cite&gt;Brave New World&lt;/cite&gt; &lt;/footer&gt;&lt;/blockquote&gt; 接下来我们看到了一个论文中很常见的用法——“引述”。 注意看这里的 [1]，当我们把鼠标放上去的时候，出现了引述的相关信息。 在 HTML 中，有三个跟引述相关的标签：blockquote 表示段落级引述内容，q 表示行内的引述内容，cite 表示引述的作品名。 这里的作品名称“What is the difference between the Web and the Internet?”，应当使用 cite 标签。 在文章的结尾处，有对应的 Reference 一节，这一节中所有的作品名称也应该加入 cite 标签。 这里我们看看引用的原文就可以知道，Wiki 文章中的信息并非直接引用，如果是直接引用的内容，那么，我们还应该加上 blockquote 或者 q 标签。 time &emsp;&emsp;HTML time 标签(&lt;time&gt;) 用来表示 24 小时制时间或者公历日期，若表示日期则也可包含时间和时区。&emsp;&emsp;此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。&emsp;&emsp;用法提示：如果给定的日期不是正常日期或者在公历中最早的日期之前，请不要使用此元素。 这里除了引用的文章之外，还出现了日期，为了让机器阅读更加方便，可以加上 time 标签。 1&lt;cite&gt;"What is the difference between the Web and the Internet?"&lt;/cite&gt;. W3C Help and FAQ. W3C. 2009. Archived from the original on &lt;time datetime="2015-07-09"&gt;9 July 2015&lt;/time&gt;. Retrieved &lt;time datetime="2015-07-16"&gt;16 July 2015&lt;/time&gt;. figure, figcaption &emsp;&emsp;HTML &lt;figure&gt; 元素（可附标题内容元素）代表一段独立的内容, 经常与说明（caption） &lt;figcaption&gt; 配合使用, 并且作为一个独立的引用单元。当它属于主内容流（main flow）时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。&emsp;&emsp;HTML &lt;figcaption&gt; 元素 是与其相关联的图片的说明/标题，用于描述其父节点 &lt;figure&gt; 元素里的其他数据。这意味着 &lt;figcaption&gt; 在&lt;figure&gt; 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。 12345&lt;figure&gt; &lt;img src="/media/examples/elephant-660-480.jpg" alt="Elephant at sunset"&gt; &lt;figcaption&gt;An elephant at sunset&lt;/figcaption&gt;&lt;/figure&gt; 我们注意一下文章的右侧，出现了几张图片，这种出现在文中的图片，不仅仅是一个 img 标签，它和下面的文字组成了一个 figure 的语法现象，figure 也是我们的一种标签，用于表示与主文章相关的图像、照片等流内容）。 这种插入文章中的内容，不仅限图片、代码表格等，只要具有一定自包含性（类似独立句子）的内容，都可以用 figure。这里，我们用 figcaption 表示内容的标题，当然也可以没有标题。 dfn &lt;dfn&gt; 元素标记了被定义的术语；术语定义应当在 &lt;p&gt;, &lt;section&gt; 或定义列表 (通常是 &lt;dt&gt;, &lt;dd&gt; 对)中给出。 被定义术语的值由下列规则确定： 如果 &lt;dfn&gt; 元素有一个 title 属性，那么该术语的值就是该属性的值。 否则，如果它仅包含一个 &lt;abbr&gt; 元素，该元素拥有 title 属性，那么该术语的值就是该属性的值。 否则，&lt;dfn&gt; 元素的文本内容就是该术语的值。 12&lt;!-- Define "The Internet" --&gt;&lt;p&gt;&lt;dfn id="def-internet"&gt;The Internet&lt;/dfn&gt; is a global system of interconnected networks that use the Internet Protocol Suite (TCP/IP) to serve billions of users worldwide.&lt;/p&gt; 123456789&lt;dl&gt; &lt;!-- Define "World-Wide Web" and reference definition for "the Internet" --&gt; &lt;dt&gt; &lt;dfn&gt; &lt;abbr title="World-Wide Web"&gt;WWW&lt;/abbr&gt; &lt;/dfn&gt; &lt;/dt&gt; &lt;dd&gt;The World-Wide Web (WWW) is a system of interlinked hypertext documents accessed on &lt;a href="#def-internet"&gt;the Internet&lt;/a&gt;.&lt;/dd&gt;&lt;/dl&gt; 注意这一句： The terms Internet and World Wide Web are often used without much distinction. However, the two are not the same. The Internet is a global system of interconnected computer networks. In contrast, the World Wide Web is a global collection of documents and other resorces, linked by hyperlinks and URIs. 这里分别定义了 Internet 和 World Wide Web，应该使用 dfn 标签。 123The terms Internet and World Wide Web are often used without much distinction. However, the two are not the same.The &lt;dfn&gt;Internet&lt;/dfn&gt; is a global system of interconnected computer networks.In contrast, the &lt;dfn&gt;World Wide Web&lt;/dfn&gt; is a global collection of documents and other resources, linked by hyperlinks and URIs. 代码中可以看到，你需要在你定义的词前后放上 dfn 标签，所以我们知道了，dfn 标签是用来包裹被定义的名词。 nav, ol, ul &emsp;&emsp;HTML &lt;nav&gt; 元素表示页面的一部分，其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。&emsp;&emsp;&lt;ol&gt; 和 &lt;ul&gt; 都是列表项。它们的不同点在于 &lt;ol&gt; 元素里条目的顺序是有意义的。 对于该选择哪一个去使用下面有个建议：尝试去更改列表项的顺序，如果其含义改变了，那么应该使用 &lt;ol&gt; 元素，否则使用 &lt;ul&gt; 更合适。 接下来，几个普通的段落之后，我们看到了文章的目录。这里的目录链接到文章的各个章节，我们可以使用 nav 标签。因为这里的目录顺序不可随意变化，所以我们使用多级的 ol 结构。 1234567891011121314&lt;nav&gt; &lt;h2&gt;Contents&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="..."&gt;History&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="..."&gt;Function&lt;/a&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="..."&gt;Linking&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="..."&gt;Dynamic updates of web pages&lt;/a&gt;&lt;/li&gt; ... &lt;/ol&gt; &lt;/li&gt; ... &lt;/ol&gt;&lt;/nav&gt; 注意，ol 和 ul 的区分是内容是否有顺序关系，每一项前面不论是数字还是点，都不影响语义的判断。不要因为视觉表现效果，而改变语义的使用。 pre, samp, code &emsp;&emsp;HTML &lt;pre&gt; 元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在 &lt;pre&gt; 开始标签后的换行符也会被省略) 注意： 你需要将该元素里的 &lt; 字符转义为 &amp;lt; 以保证代码里的关闭代码不被浏览器解释为标签。]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端学习之路</tag>
        <tag>语义化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从今天起记录我的前端学习之路]]></title>
    <url>%2F2019%2F07%2F26%2F%E4%BB%8E%E4%BB%8A%E5%A4%A9%E8%B5%B7%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[从今天起，我要开始记录我自己的前端学习之路了。 其实我不完全是前端的小白，断断续续知识也学了不少了，只是前端知识面覆盖太广，而我学习时间拖的太长，好多都已经遗忘了，所以一直都想找个机会从头把所有知识点都巩固一下。 前两天翻知乎，看到一个问题——有哪些适合前端程序员浏览的网站，有答案推荐了百度前端学院，我就想正好利用这个平台好好巩固一下我的基础知识。今天花了一上午搭建了这个个人网站，希望可以将我的学习之路好好地记录下来。 我喜欢前端，一是因为可以做出精致的，直接展示给用户的交互界面，二是因为我很喜欢JavaScript这门语言。不是说js本身性能多么好，语法多么完美，而是js一开始被人们认为是玩具语言，不出多少年必死的言论层出不穷，然而js却越挫越勇，在很多大神手中玩出了花，甚至现在可以只靠js就能从前端到后台，从桌面程序到跨平台应用，都在一个人手中实现，太厉害了。而那句著名的，“一切能用JavaScript实现的程序，最终都会被用JavaScript实现”，也深深打动了我。 希望自己可以将这个网站坚持做下去，也许几年后的自己真的会感激我现在的努力，加油！]]></content>
      <categories>
        <category>杂感</category>
      </categories>
  </entry>
</search>
